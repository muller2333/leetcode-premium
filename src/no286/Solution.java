package no286; import java.util.ArrayList; import java.util.List; class Solution { public void wallsAndGates(int[][] grid) { int m = grid.length; int n = grid[0].length; int i = 0; int j = 0; boolean flag = false; while (i < m) { for (j = 0; j < n; j++) { if (grid[i][j] == 0) { flag = true; break; } } if (flag) { List<int[]> list = new ArrayList<>(); list.add(new int[] { i, j }); int val = 1; while (list.size() > 0) { List<int[]> mid = new ArrayList<>(); for (int[] arr : list) { int row = arr[0]; int col = arr[1]; if (row < m - 1 && grid[row + 1][col] == 2147483647) { mid.add(new int[] { row + 1, col }); grid[row + 1][col] = val; } if (row > 0 && grid[row - 1][col] == 2147483647) { mid.add(new int[] { row - 1, col }); grid[row - 1][col] = val; } if (col < n - 1 && grid[row][col + 1] == 2147483647) { mid.add(new int[] { row, col + 1 }); grid[row][col + 1] = val; } if (col > 0 && grid[row][col - 1] == 2147483647) { mid.add(new int[] { row, col - 1 }); grid[row][col - 1] = val; } } val++; list = mid; } break; } i++; } if (++j == n) { i++; j = 0; } while (i < m) { while (j < n) { if (grid[i][j] == 0) { List<int[]> list = new ArrayList<>(); list.add(new int[] { i, j }); int val = 1; while (list.size() > 0) { List<int[]> mid = new ArrayList<>(); for (int[] arr : list) { int row = arr[0]; int col = arr[1]; if (row < m - 1 && grid[row + 1][col] > val) { mid.add(new int[] { row + 1, col }); grid[row + 1][col] = Math.min(val, grid[row + 1][col]); } if (row > 0 && grid[row - 1][col] > val) { mid.add(new int[] { row - 1, col }); grid[row - 1][col] = Math.min(val, grid[row - 1][col]); } if (col < n - 1 && grid[row][col + 1] > val) { mid.add(new int[] { row, col + 1 }); grid[row][col + 1] = Math.min(val, grid[row][col + 1]); } if (col > 0 && grid[row][col - 1] > val) { mid.add(new int[] { row, col - 1 }); grid[row][col - 1] = Math.min(val, grid[row][col - 1]); } } val++; list = mid; } } j++; } j = 0; i++; } } }